=========================
The ``7-base_geometry`` module
=========================

Using ``base_geometry``
-------------------

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

>>> bg.integer_validator("my_int", 12)

>>> bg.integer_validator("width", 89)

>>> bg.integer_validator("width", -1)
Traceback (most recent call last):
ValueError: width must be greater than 0

>>> bg.integer_validator("width", 8.9)
Traceback (most recent call last):
TypeError: width must be an integer

>>> bg.integer_validator("width", (1, 2, 3))
Traceback (most recent call last):
TypeError: width must be an integer

>>> bg.integer_validator("width", [1, 2, 3])
Traceback (most recent call last):
TypeError: width must be an integer

>>> bg.integer_validator("width", {1, 2, 3})
Traceback (most recent call last):
TypeError: width must be an integer

>>> bg.integer_validator("width", True)
Traceback (most recent call last):
TypeError: width must be an integer

>>> bg.integer_validator("width", None)
Traceback (most recent call last):
TypeError: width must be an integer

>>> bg.integer_validator("width", float("inf"))
Traceback (most recent call last):
TypeError: width must be an integer

>>> bg.integer_validator("width", float("NaN"))
Traceback (most recent call last):
TypeError: width must be an integer

>>> bg.integer_validator("width", "number")
Traceback (most recent call last):
TypeError: width must be an integer

>>> bg.integer_validator("width", -1)
Traceback (most recent call last):
ValueError: width must be greater than 0

>>> bg.integer_validator("width", 0)
Traceback (most recent call last):
ValueError: width must be greater than 0
